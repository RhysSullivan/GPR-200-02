// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Extended by Rhys Sullivan
//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

color4 crossFade(in sViewport vp, in color4 a, in color4 b)
{
 	// texture(full-screen)
    sScalar blend = abs(sin(iTime/2.));
    return mix(a,b, blend);
}

sCoord waveDistortion(sCoord vp, float waveFreq, float waveHeight)
{    
    vp.y += sin(vp.x*waveFreq)/waveHeight; // simple sin wave setup that adjusts based on x coor
    return vp;
}

// Referenced: https://godotengine.org/qa/13023/shaders-how-does-one-create-blackhole-effect-using-shaders
color4 wormholeDistortion(in sViewport vp)
{    
   vec2 center = vec2(0.,0.); // sphere location
   float p = 0.01; // radius
   vec2 diff = center - vp.ndc;
   diff.x *= vp.aspectRatio; // adjust radius of sphere for aspect ratio
    
   float d = length(diff); // distance from the sphere center to our uv coord
   float invD = 1./d;
   vec2 dir = diff * invD; // get the direction for light bending, used cache d value
   
   // radius / distance^2  sets us up for the closer we are, the more distortion
   // vpc.ndc puts us in the space to distort, dir tells us what direction to distort in
   vec2 uv = vp.ndc + dir * (p * (invD*invD + .002)); 
    
   uv += iTime; // move the background
   d = step(.2,d); // proably the same as doing an if statement
   return texture(iChannel3, uv) * d;  // return distorted image      
}

// referenced: https://prideout.net/barrel-distortion
sCoord barrelDistortion(in sViewport vp)
{    	        
    // barrel distortion
	sCoord p = vp.ndc;
	sScalar theta  = atan(p.y, p.x); 
    sScalar radius = length(p);
    radius = pow(radius, 2.);
    p.x = radius * cos(theta);
    p.y = radius * sin(theta);    		
    return p;
}

sScalar diffuseIntensity(sBasis surfacePosition, sBasis surfaceNormal, sBasis lightPos, sScalar lightInten)
{
 	sScalar kD; // diffuse coefficient
    sScalar iL; // Attenuation    
	sBasis L = normalize(lightPos - surfacePosition); // light position
    
    kD = dot(surfaceNormal, L); // check how aligned the light and normal are
    kD = max(0., kD);
	sScalar d = length(lightPos - surfacePosition);
    
    iL = 1. / (1. + (d / lightInten) + ( (d * d) / (lightInten * lightInten) ));   
    return kD * iL;
}

color4 shading(in sViewport vp)
{
    sBasis surfacePosition = vec3(vp.ndc, 1.);
    sBasis surfaceNormal = normalize(vec3(vp.ndc, 1.));   
    sBasis lightPos = sBasis(sin(iTime*6.),cos(iTime*6.), 2.);    	    
    
    color4 cL = color4(1.);
    color4 cD = texture(iChannel2, vp.ndc);
    sScalar iD = diffuseIntensity(surfacePosition, surfaceNormal, lightPos, 200.); // diffuse intensity
    return cL * cD * iD;	
}


/* 
references: https://www.shadertoy.com/view/3llfWf
https://keisan.casio.com/exec/system/1359533867
*/
color4 cubeMap(in sRay ray, in sViewport vp)
{       
	const float pi = 3.14;
    if(iMouse.z > 0.)
    {           
        vec3 dir = ray.direction.xyz; // base direction for the ray      
        vec2 mouse = (iMouse.xy * vp.resolutionInv); // normalized mouse coordinates
        vec2 theta = (mouse * 2. * pi) - 1.; // theta represents the angle that we are rotating at, this maps x to be from -1 to 2pi-1
    	mat2 mX = mat2(cos(theta.x), -sin(theta.x), sin(theta.x), cos(theta.x)); // rotation matrix for x    
        mat2 mY = mat2(cos(theta.y), -sin(theta.y), sin(theta.y), cos(theta.y)); // rotation matrix for y
        dir.zy *= -mY; // unflip rotation and apply y rotation
        dir.zx *= mX; // apply x rotation
        
        sBasis surfacePosition = dir; // reset this variable for readability
    	sBasis surfaceNormal = normalize(dir); 
    	sBasis lightPos = sBasis(sin(iTime)*3.,cos(iTime)*3., 2.);    	    
    
    	color4 cL = color4(1.); // light color
    	color4 cD = texture(iChannel1, dir); // color of surface
    	sScalar iD = diffuseIntensity(surfacePosition, surfaceNormal, lightPos, 200.); // diffuse intensity
    	return cL * cD * (iD+.1); // add .1 for ambient light, calc final color    
    	return texture(iChannel1, dir);
    }    
    
	vec3 cubeLoc = ray.direction.xyz;
	cubeLoc.xy = waveDistortion(cubeLoc.xy, 5., 5.);
	float rot = sin(iTime/1000.)*360.;      
    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));
    cubeLoc.xz *= m;
    return texture(iChannel1, cubeLoc);    
}

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;     	
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res;
    loc = ratio * loc;
    
    
    color4 a = texture(iChannel0, loc);
    color4 b = texture(iChannel2, loc);    
    color4 c = texture(iChannel0, waveDistortion(loc, 5., 5.));
    color4 d = texture(iChannel0, barrelDistortion(vp));
    //return crossFade(vp, a, b);
    //return crossFade(vp, a, c);
    //return crossFade(vp, a, d);
 	//return shading(vp);   
   	return wormholeDistortion(vp);
	return cubeMap(ray, vp);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}